/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CRUD;

import ConnectionToDB.DatabaseConnection;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import models.Proffessor;

/**
 *
 * @author anticn
 */
public class AppCRUD extends javax.swing.JFrame {

    /**
     * Creates new form AppCRUD
     */
    public AppCRUD() {
        initComponents();
        displayProffessors();
        this.setLocationRelativeTo(null);
    }
    
    private void displayProffessors(){
        ArrayList<Proffessor> proffessorsList = pupulateProffessorsList();
        DefaultTableModel model = (DefaultTableModel)jTableProffessors.getModel();
        model.setRowCount(0);
        Object[] row = new Object[7];
        for(int i=0;i<proffessorsList.size();i++ ){
            row[0]=proffessorsList.get(i).getId();
            row[1]=proffessorsList.get(i).getFirstName();
            row[2]=proffessorsList.get(i).getLastName();
            row[3]=proffessorsList.get(i).getGmail();
            row[4]=proffessorsList.get(i).getGender();
            row[5]=proffessorsList.get(i).getSubjects();
            row[6]=proffessorsList.get(i).getStartDate();

            model.addRow(row);
        }
    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldFirstName = new javax.swing.JTextField();
        jTextFieldGmail = new javax.swing.JTextField();
        jRadioButtonMale = new javax.swing.JRadioButton();
        jRadioButtonFemale = new javax.swing.JRadioButton();
        jComboBoxSubjects = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldLastName = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButtonUPDATE = new javax.swing.JButton();
        jButtonDELETE = new javax.swing.JButton();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProffessors = new javax.swing.JTable();
        jButtonUpdateFromTable = new javax.swing.JButton();
        jButtonDeleteFromTable = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Subject");

        jLabel3.setText("Gender");

        jLabel4.setText("First name");

        jLabel5.setText("Gmail");

        buttonGroup1.add(jRadioButtonMale);
        jRadioButtonMale.setText("Male");

        buttonGroup1.add(jRadioButtonFemale);
        jRadioButtonFemale.setText("Female");

        jComboBoxSubjects.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Java", "Python", "SQL", "JavaScript", "QA" }));

        jLabel7.setText("Last name");

        jButton1.setText("INSERT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonINSERT(evt);
            }
        });

        jButton2.setText("DISPLAY");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDISPLAY(evt);
            }
        });

        jButtonUPDATE.setText("UPDATE");
        jButtonUPDATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUPDATEActionPerformed(evt);
            }
        });

        jButtonDELETE.setText("DELETE");
        jButtonDELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDELETEActionPerformed(evt);
            }
        });

        jLabel1.setText("Date");

        jLabel6.setText("ID");

        jTextFieldID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldIDKeyReleased(evt);
            }
        });

        jTableProffessors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "first_name", "last_name", "gmail", "gender", "subjects", "start_date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProffessors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProffessorsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableProffessors);

        jButtonUpdateFromTable.setText("Update From Table");
        jButtonUpdateFromTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateFromTableActionPerformed(evt);
            }
        });

        jButtonDeleteFromTable.setText("Delete From Table");
        jButtonDeleteFromTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteFromTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldGmail, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                            .addComponent(jTextFieldFirstName)
                            .addComponent(jTextFieldLastName)
                            .addComponent(jTextFieldID)
                            .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSubjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRadioButtonMale)
                                .addGap(28, 28, 28)
                                .addComponent(jRadioButtonFemale)))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonDELETE)
                            .addComponent(jButtonUPDATE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonUpdateFromTable)
                        .addGap(46, 46, 46)
                        .addComponent(jButtonDeleteFromTable, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextFieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jTextFieldGmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jRadioButtonMale)
                            .addComponent(jRadioButtonFemale))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxSubjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButtonUPDATE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonUpdateFromTable)
                            .addComponent(jButtonDeleteFromTable))))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButtonDELETE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonINSERT(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonINSERT
        try{
//            Connection myConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/crud_app","root","Tech09360851403");
            Connection myConnection = DatabaseConnection.getInstance().getConnection();
            
            String query = "INSERT INTO proffessors(first_name,last_name,gmail,gender,subjects,start_date)VALUES(?,?,?,?,?,?)";
            
//            PreparedStatement pst = DatabaseConnection.getInstance().getConnection().prepareStatement(query); //SINGLETONE NACIN
            
            PreparedStatement pst = myConnection.prepareStatement(query);
            

            pst.setString(1, jTextFieldFirstName.getText());
            pst.setString(2, jTextFieldLastName.getText());
            pst.setString(3, jTextFieldGmail.getText());
//            String gender;
//            if(jRadioButtonMale.isSelected()){
//                gender = "Male";
//            }
//            if(jRadioButtonFemale.isSelected()){
//                gender = "Female";
//            }
//            pst.setString(4, gender);
//          prethodnih 6 redova spakovano u jedan red ispod
            pst.setString(4, jRadioButtonMale.isSelected() ? "Male" : "Female");
            String course = jComboBoxSubjects.getSelectedItem().toString();
            pst.setString(5, course);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser.getDate());
            pst.setString(6, date);
            
            pst.executeUpdate();
            
            pst.close();
            myConnection.close();
            
            displayProffessors();
            
            JOptionPane.showMessageDialog(null, "Inserted Sucessfully!");
                    
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_jButtonINSERT

    private void jButtonDISPLAY(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDISPLAY
//        Ovo izmestamo u metodu da bi poceli da radimo display preko tabele
//        ArrayList<Proffessor> proffessorsList = pupulateProffessorsList();
//        for (Proffessor proffessor : proffessorsList) {
//            System.out.println("| id - " + proffessor.getId() 
//                                + " | first_name - " + proffessor.getFirstName() 
//                                + " | last_name - " + proffessor.getLastName() 
//                                + " | gmail - " + proffessor.getGmail()
//                                + " | gender - " + proffessor.getGender()
//                                + " | subject - " + proffessor.getSubjects()
//                                + " | start_date - " + proffessor.getStartDate()
//                                + " |" );
//        }

//        DefaultTableModel model = (DefaultTableModel)jTableProffessors.getModel();
//        model.setRowCount(0);
        
//        displayProffessors(); // i ovde mozemo pozvati novi nacin disploejovanja profesora
                              // nama ovde prestaje potreba za ovim buttonom mozemo ga prebaciti na Reset button
        
                              
//      Fnkcionalnost za reset
        jTextFieldID.setText("");
        jTextFieldFirstName.setText("");
        jTextFieldLastName.setText("");
        jTextFieldGmail.setText("");
        buttonGroup1.clearSelection();
        jComboBoxSubjects.setSelectedIndex(0);
//        Date date = new Date();
        jDateChooser.setDate(new Date());
    }//GEN-LAST:event_jButtonDISPLAY

    private void jButtonUPDATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUPDATEActionPerformed
        try {
//            Connection myConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/crud_app","root","Tech09360851403");
            Connection myConnection = DatabaseConnection.getInstance().getConnection();
            
            String query = "UPDATE proffessors SET first_name = ?, last_name = ?, gmail = ?, gender = ?, subjects = ?, start_date = ? WHERE id = ?";
            
            PreparedStatement pst = myConnection.prepareStatement(query);
            
//            PreparedStatement pst = DatabaseConnection.getInstance().getConnection().prepareStatement(query);
            
            pst.setString(1, jTextFieldFirstName.getText());
            pst.setString(2, jTextFieldLastName.getText());
            pst.setString(3, jTextFieldGmail.getText());
            pst.setString(4, jRadioButtonMale.isSelected() ? "Male" : "Female");
            String course = jComboBoxSubjects.getSelectedItem().toString();
            pst.setString(5, course);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date = sdf.format(jDateChooser.getDate());
            pst.setString(6, date);
            
            pst.setInt(7,Integer.parseInt(jTextFieldID.getText()));
            
            if(pst.executeUpdate() > 0){
                JOptionPane.showMessageDialog(null, "Updated Sucessfully!");
            }
            
            pst.close();
            myConnection.close();
            
            displayProffessors();
            
        } catch (SQLException e) {
            System.out.println("Update Faild " + e.getLocalizedMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonUPDATEActionPerformed

    private void jButtonDELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDELETEActionPerformed
        try {
            Connection myConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/crud_app","root","Tech09360851403");
            
            String query = "DELETE FROM proffessors WHERE id = ?";
            
            PreparedStatement pst = myConnection.prepareStatement(query);
            pst.setInt(1, Integer.parseInt(jTextFieldID.getText()));
            
            if (pst.executeUpdate() > 0) {
                JOptionPane.showMessageDialog(null, "Deleted Sucessfully!");
            }
            
            pst.close();
            myConnection.close();
            
            displayProffessors();
            
//            JOptionPane.showMessageDialog(null, "Deleted Sucessfully!");
        } catch (SQLException e) {
            System.out.println("Delete faild" + e.getLocalizedMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonDELETEActionPerformed

    private void jTableProffessorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProffessorsMouseClicked
        int i = jTableProffessors.getSelectedRow();
        TableModel model = jTableProffessors.getModel();
        
        jTextFieldID.setText(model.getValueAt(i,0).toString());
        jTextFieldFirstName.setText(model.getValueAt(i,1).toString());
        jTextFieldLastName.setText(model.getValueAt(i,2).toString());
        jTextFieldGmail.setText(model.getValueAt(i,3).toString());
        
        String sex = model.getValueAt(i, 4).toString();
            if(sex.equals("Male")){
                jRadioButtonMale.setSelected(true);
            }else{
                jRadioButtonFemale.setSelected(true);
            }
//        sex.equals("Male") ? jRadioButtonMale.setSelected(true) : jRadioButtonFemale.setSelected(true)); OVO NE MOZE
        
        String subject = model.getValueAt(i, 5).toString();
        switch(subject){
            case "Java":
                 jComboBoxSubjects.setSelectedIndex(0);
                 break;
            case "Python":
                 jComboBoxSubjects.setSelectedIndex(1);
                 break;
            case "SQL":
                 jComboBoxSubjects.setSelectedIndex(2);
                 break;     
            case "JavaScript":
                 jComboBoxSubjects.setSelectedIndex(3);
                 break;   
            case "QA":
                 jComboBoxSubjects.setSelectedIndex(4);
                 break;   
        }
        try{
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse(model.getValueAt(i, 6).toString());
            jDateChooser.setDate(date);
        }catch(Exception e){
            System.out.println(e.getLocalizedMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_jTableProffessorsMouseClicked

    private void jButtonUpdateFromTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateFromTableActionPerformed
        int i = jTableProffessors.getSelectedRow();
        TableModel model = jTableProffessors.getModel();
        
        try {
            Connection myConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/crud_app","root","Tech09360851403");
            
            String query = "UPDATE proffessors SET first_name = ?, last_name = ?, gmail = ?, gender = ?, subjects = ?, start_date = ? WHERE id = ?";
            
            PreparedStatement pst = myConnection.prepareStatement(query);
            pst.setString(1,model.getValueAt(i,1).toString());
            pst.setString(2, model.getValueAt(i,2).toString());
            pst.setString(3, model.getValueAt(i,3).toString());
            pst.setString(4, model.getValueAt(i,4).toString());
            pst.setString(5, model.getValueAt(i,5).toString());
            pst.setString(6, model.getValueAt(i,6).toString());;
            
            pst.setInt(7,Integer.parseInt(model.getValueAt(i,0).toString()));
            
            pst.executeUpdate();
            
            pst.close();
            myConnection.close();
            
            displayProffessors();
            
            JOptionPane.showMessageDialog(null, "Updated Sucessfully!");
        } catch (SQLException e) {
            System.out.println("Update Faild " + e.getLocalizedMessage());
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_jButtonUpdateFromTableActionPerformed

    private void jButtonDeleteFromTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteFromTableActionPerformed
        int i = jTableProffessors.getSelectedRow();
        TableModel model = jTableProffessors.getModel();
        
        try {
            Connection myConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/crud_app","root","Tech09360851403");
            
            String query = "DELETE FROM proffessors WHERE id = ?";
            
            PreparedStatement pst = myConnection.prepareStatement(query);
            
            pst.setInt(1,Integer.parseInt(model.getValueAt(i,0).toString()));
            
            pst.executeUpdate();
            
            pst.close();
            myConnection.close();
            
            displayProffessors();
            
            JOptionPane.showMessageDialog(null, "Deleted Sucessfully!");
        } catch (SQLException e) {
            System.out.println("Deleted Faild " + e.getLocalizedMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonDeleteFromTableActionPerformed

    private void jTextFieldIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldIDKeyReleased
        try{
            String query = "SELECT * FROM proffessors WHERE id = ?";
//            PreparedStatement pst = DriverManager.getConnection("jdbc:mysql://localhost:3306/crud_app","root","Tech09360851403").prepareStatement(query);
            PreparedStatement pst = DatabaseConnection.getInstance().getConnection().prepareStatement(query);
            pst.setString(1, jTextFieldID.getText());
            ResultSet rs = pst.executeQuery();
//            if(rs.next()){
//                TableModel model = jTableProffessors.getModel();
//                jTableProffessors.getSelectedRow?
//            }
                
            if(rs.next()){    
//                jTextFieldID.setText(String.valueOf(rs.getInt(1)));
                jTextFieldFirstName.setText(rs.getString(2));
                jTextFieldLastName.setText(rs.getString(3));
                jTextFieldGmail.setText(rs.getString(4));             
                String sex = rs.getString(5);
                if(sex.equals("Male")){
                    jRadioButtonMale.setSelected(true);
                }else{
                    jRadioButtonMale.setSelected(true);
                }
                String subject = rs.getString(6);
                switch(subject){
                    case "Java":
                         jComboBoxSubjects.setSelectedIndex(0);
                         break;
                    case "Python":
                         jComboBoxSubjects.setSelectedIndex(1);
                         break;
                    case "SQL":
                         jComboBoxSubjects.setSelectedIndex(2);
                         break;     
                    case "JavaScript":
                         jComboBoxSubjects.setSelectedIndex(3);
                         break;   
                    case "QA":
                         jComboBoxSubjects.setSelectedIndex(4);
                         break;  
                }
                jDateChooser.setDate(rs.getDate(7));
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
        }
    }//GEN-LAST:event_jTextFieldIDKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppCRUD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonDELETE;
    private javax.swing.JButton jButtonDeleteFromTable;
    private javax.swing.JButton jButtonUPDATE;
    private javax.swing.JButton jButtonUpdateFromTable;
    private javax.swing.JComboBox<String> jComboBoxSubjects;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButtonFemale;
    private javax.swing.JRadioButton jRadioButtonMale;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableProffessors;
    private javax.swing.JTextField jTextFieldFirstName;
    private javax.swing.JTextField jTextFieldGmail;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldLastName;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Proffessor> pupulateProffessorsList() {
        ArrayList<Proffessor> proffessorsList = new ArrayList<>();
        try {
            Connection myConnection = DriverManager.getConnection("jdbc:mysql://localhost:3306/crud_app","root","Tech09360851403");
            
            String query = "SELECT * FROM proffessors";
            Statement st = myConnection.createStatement();
            
            ResultSet rs = st.executeQuery(query);
            // Student temp
            Proffessor proffessor;
            while (rs.next()) {                
                proffessor = new Proffessor(rs.getInt(1), 
                                            rs.getString(2), 
                                            rs.getString(3),
                                            rs.getString(4),
                                            rs.getString(5),
                                            rs.getString(6),
                                            rs.getDate(7)
                                            );
                proffessorsList.add(proffessor);
            }

            myConnection.close();
        } catch (SQLException e) {
            System.out.println("Population Faild " + e.getLocalizedMessage());
            e.printStackTrace();
        }
        
        return proffessorsList;
    }
}
